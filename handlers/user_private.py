import os

from aiogram import F, types, Router, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import CallbackQuery
from aiogram.utils.formatting import (
    as_list,
    as_marked_section,
    Bold,
)  # Italic, as_numbered_list –∏ —Ç–¥
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_products
from filters.chat_types import ChatTypeFilter

from kbds.reply import get_keyboard
from kbds.inline import get_url_btns, get_inlineMix_btns, start_kb, support

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

bot = Bot(token=os.getenv('TOKEN'))
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEEIwABZfh-ObKLuCOIyzpVK4MdHVw-c90AAqYAA1KJkSNruSoQjbfHvDQE",  reply_markup=get_keyboard(
            "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(1, 1)
        ),)
    await message.answer(f"<em>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ FF Poizon. –Ø –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ç–æ "
        f"–æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "
        f"–∏ —Ç–∞–º –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –Ø —Å–∫–∏–Ω—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É –º–µ–Ω—è –µ—Å—Ç—å</em>", parse_mode="HTML")
    await message.answer_photo(photo="AgACAgIAAxkBAAP1ZfiCEEtdlVDwyHLDARPe8Mm4OqsAAqzXMRtn68lL27q7dPyIc58BAAMCAAN5AAM0BA",
                               caption="<em>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</em>"
        , parse_mode="HTML",
                               reply_markup=start_kb)


# @user_private_router.message(F.text.lower() == "–º–µ–Ω—é")
@user_private_router.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message, session: AsyncSession):
    for product in await orm_get_products(session):
        await message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}\
                    </strong>\n{product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}", parse_mode="HTML"
        )
    await message.answer("–í–æ—Ç –º–µ–Ω—é:")


@user_private_router.message(F.text.lower() == "–æ –º–∞–≥–∞–∑–∏–Ω–µ")
@user_private_router.message(Command("about"))
async def about_cmd(message: types.Message):
    await message.answer("–û –Ω–∞—Å:")

@user_private_router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')
    for product in await orm_get_products(session):
        await callback.message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}\
                    </strong>\n{product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}", parse_mode="HTML")
    return menu_cmd

@user_private_router.callback_query(F.data == 'help')
async def catalog(callback: CallbackQuery):
    await callback.answer('–ü–æ–º–æ—â—å/–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü´±üèª‚Äçü´≤üèª')
    await callback.message.answer_photo(photo="AgACAgIAAxkBAAIBD2X4j-bZLgcuya9mnFegClruQuHkAAIM2DEbZ-vJSwj6qPjTUtE6AQADAgADeQADNAQ",
                                        caption="<b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º/–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É</b>‚¨áÔ∏è",
                                        parse_mode="HTML",
                                        reply_markup=support)

    return menu_cmd

# @user_private_router.message(F.photo)
# async def photo(message: types.Message):
#     photo_data = message.photo[-1]
#
#     await message.answer(f'{photo_data}')


# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
#     await message.answer(str(message.contact))


# @user_private_router.message(F.location)
# async def get_location(message: types.Message):
#     await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
#     await message.answer(str(message.location))
